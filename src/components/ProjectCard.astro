---
import type { Project } from '../types/project';

export interface Props {
  project: Project;
}

const { project } = Astro.props;

// Serialize project data for JavaScript
const projectDataJson = JSON.stringify(project);
---

<div 
  class="bg-white rounded-xl shadow-md hover:shadow-xl transition-all duration-300 overflow-hidden group cursor-pointer"
  data-project-card
  data-project-title={project.title}
  data-project-summary={project.summary}
  data-project-tech={project.tech.join(', ')}
  data-project-data={projectDataJson}
>
  <!-- Project Image -->
  <div class="relative h-48 bg-gradient-to-br from-gray-100 to-gray-200 overflow-hidden">
    <img 
      src={project.cover} 
      alt={`${project.title} preview`}
      class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
      loading="lazy"
    />
    
    <!-- Featured Badge -->
    {project.featured && (
      <div class="absolute top-3 left-3">
        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary-100 text-primary-800">
          Featured
        </span>
      </div>
    )}
    
    <!-- Status Badges -->
    <div class="absolute top-3 right-3 flex flex-wrap gap-1">
      {project.badges.map((badge) => (
        <span class="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-white/90 text-gray-700 backdrop-blur-sm">
          {badge}
        </span>
      ))}
    </div>
  </div>
  
  <!-- Project Content -->
  <div class="p-6">
    <div class="flex items-start justify-between mb-3">
      <h3 class="text-xl font-semibold text-gray-900 group-hover:text-primary-600 transition-colors">
        {project.title}
      </h3>
      {project.fileSize && (
        <span class="text-sm text-gray-500 ml-2">
          {project.fileSize}
        </span>
      )}
    </div>
    
    <p class="text-gray-600 mb-4 line-clamp-3">
      {project.summary}
    </p>
    
    <!-- Tech Stack -->
    <div class="flex flex-wrap gap-2 mb-4">
      {project.tech.slice(0, 4).map((tech) => (
        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
          {tech}
        </span>
      ))}
      {project.tech.length > 4 && (
        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
          +{project.tech.length - 4} more
        </span>
      )}
    </div>
    
    <!-- Action Links -->
    <div class="flex flex-wrap gap-3">
      {project.links.demo && (
        <a 
          href={project.links.demo}
          target="_blank"
          rel="noopener noreferrer"
          class="inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors"
        >
          <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
          </svg>
          Live Demo
        </a>
      )}
      
      {project.links.code && (
        <a 
          href={project.links.code}
          target="_blank"
          rel="noopener noreferrer"
          class="inline-flex items-center px-3 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors"
        >
          <svg class="w-4 h-4 mr-1.5" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
          </svg>
          Code
        </a>
      )}
      
      {project.links.pdf && (
        <a 
          href={project.links.pdf}
          target="_blank"
          rel="noopener noreferrer"
          class="inline-flex items-center px-3 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors"
        >
          <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          PDF
        </a>
      )}
    </div>
  </div>
</div>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Add click handlers to project cards
    const projectCards = document.querySelectorAll('[data-project-card]');
    
    projectCards.forEach(card => {
      card.addEventListener('click', (e) => {
        // Don't open modal if clicking on action buttons
        const target = e.target as HTMLElement;
        if (target.closest('a')) {
          return;
        }
        
        const projectDataJson = card.getAttribute('data-project-data');
        if (projectDataJson && (window as any).openProjectModal) {
          try {
            const projectData = JSON.parse(projectDataJson);
            (window as any).openProjectModal(projectData);
          } catch (error) {
            console.error('Error parsing project data:', error);
          }
        }
      });
    });
  });
</script>